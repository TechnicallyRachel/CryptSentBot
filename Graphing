#Work-in-progress
#Graph of 1 hr incriments of data

#Bitcoin, Ethereum, Litecoin prices
#Bitcoin, Ethereum, Litecoin sentiment
import tweepy, time
from twython import Twython, TwythonError
from textblob import TextBlob #about textblob accuracy https://stackoverflow.com/questions/34518570/how-are-sentiment-analysis-computed-in-blob
import csv
from csv import reader
import datetime
from credentials import * #keys to twitter app in this file
import matplotlib
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from matplotlib.ticker import NullFormatter
from pylab import figure
import numpy as np
from numpy import genfromtxt
import pandas as pd

from bs4 import BeautifulSoup
import requests
from urllib2 import urlopen

import re


import threading
import os



#********READING SENTIMENT DATA******
#READ CSV COLUMN AS NUMBERED LIST (NOT STRING)
"""
bitDataAv = pd.read_csv("bitData.csv", sep = ",")
liteDataAv = pd.read_csv("liteData.csv", sep = ",")
ethDataAv = pd.read_csv("ethData.csv", sep = ",")
#print data.head()
"""
dataAv = pd.read_csv("cryptData.csv", sep = ",")

#DEFINING VARIABE TO GRAPH
bitAvPol = dataAv["avBitPol"]
#print bitAvPol
liteAvPol = dataAv["avLitePol"]
print liteAvPol
ethAvPol = dataAv["avEthPol"]
#print ethAvPol

dfcall=dataAv.astype('datetime64[ns]')
Time = dfcall["time"]
#print Time

#DEFINING VARIABE TO GRAPH
bitPrice = dataAv["bitPrice"]
#print bitPrice
ethPrice = dataAv["ethPrice"]
#print liteAvPol
litePrice = dataAv["litePrice"]
#print ethAvPol

a1 = bitPrice
a2 = litePrice
a3 = ethPrice
#print a1, a2, a3

x = Time
#x = [Time]
y1 = bitAvPol
y2 = liteAvPol
y3 = ethAvPol

#TAKING AVERAGE POLARITY OF THE HOUR

# Extract [Pol] as numbered list variable using pandas
#data = pd.read_csv("ethDataTemp.csv", sep = ",")
#bitPol = data['Pol']
#Sub = data["0.0"]
            
#FIND THE AVERAGE POL AND SUB FOR THE HOUR
    #THIS ALL WORKS - FROM NUMPY
findBitPol = np.array([bitAvPol]).astype(np.float)
avBitPol = np.mean(findBitPol, dtype=np.float64)
print 'average bitcoin sentiment for the hour is:', avBitPol
a = 'Bitcoin average/hr:', avBitPol

findLitePol = np.array([liteAvPol]).astype(np.float)
avLitePol = np.mean(findLitePol, dtype=np.float64)
print 'average litecoin sentiment for the hour is:', avLitePol
b = 'Litecoin average/hr:', avLitePol

findEthPol = np.array([ethAvPol]).astype(np.float)
avEthPol = np.mean(findEthPol, dtype=np.float64)
print 'average Ethereum sentiment for the hour is:', avEthPol
c = 'Ethereum average/hr:', avEthPol

    #findSub = np.array([Sub]).astype(np.float)
    #avSub = np.mean(findSub, dtype=np.float64)
#print 'The average polarity of 10 most current tweets is:', avPol


#*********MATPLOTLIB******
# plot with various axes scales

fig, axs = plt.subplots(2, 2, sharex=True)
fig.subplots_adjust(left=0.08, right=0.98, wspace=0.1)
#plt.title('Sentiment Analysis Graph\nof Cryptocurrency')#DOESNOTWORK

#****linear
#fig = plt.figure()

#*******SENTIMENT GRAPH*******

ax = axs[0, 0]
#ylim is a function of pyplot - limits y axis
#ax.ylim(-2.0, 2.0)

#plt.plot(x,y1,label='Bitcoin')
plot1 = ax.plot(x,y1,'red',label='Bitcoin') 
#plt.plot(x,y2,label='Litecoin')
plot2 = ax.plot(x,y2,'orange',label='Litecoin')
#plt.plot(x,y3,label='Ethereum')
plot3 = ax.plot(x,y3,'b-',label='Ethereum')

ax.set_xlabel('Past Hour')
ax.set_ylabel('Sentiment Comparisons')
# Make the y-axis label, ticks and tick labels match the line color.
#ax.set_ylabel('Sentiment', color='black')
ax.tick_params('y', colors='black')
ax.margins(0.5)
#ax.title('Sentiment Analysis Graph\nof Cryptocurrency')

#ax.legend()
#UPPER LEGEND
#ax.legend( [ 'Lag ' + str(lag) for lag in all_x],loc='center right', bbox_to_anchor=(1.3, 0.5)


#LOWER LEGEND
# Shrink current axis's height by 10% on the bottom
box = ax.get_position()
ax.set_position([box.x0, box.y0 + box.height * 0.1,
                 box.width, box.height * 0.9])

# Put a legend below current axis
ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05), ncol=5)
#ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05),
#          fancybox=True, shadow=True, ncol=5)

#Applies grid
#ax.grid(True)
#Subplot must have 111
#ax = fig.add_subplot(111)

#leg1 = ax.legend(loc='upper right')
    #SAVE FIG TO PNG
#fig.savefig('bitfig1.png', dpi=fig.dpi)
#plt.show()

#******BITCOIN PRICE/SENT GRAPH****
# symmetric log
ax = axs[0, 1]

ax.plot(x, a1, 'black',label='Prices')
ax.set_xlabel('Past Hour')
# Make the y-axis label, ticks and tick labels match the line color.
ax.set_ylabel('Bitcoin Price', color='black')
ax.tick_params('y', colors='black')

ax2 = ax.twinx()
#s2 = np.sin(2 * np.pi * t)
ax2.plot(x, y1, 'r-',label='Bitcoin Sentiment')
ax2.set_ylabel('Bitcoin Sentiment', color='r')
ax2.tick_params('y', colors='r')
ax2.margins(0.5)
#ax2.tick_params((-1.0, 1.0), colors='r')
#DOES NOT WORK
#ax2.ylim(-1.0, 1.0))

#ax.legend()

# Shrink current axis's height by 10% on the bottom
box = ax.get_position()
ax.set_position([box.x0, box.y0 + box.height * 0.1,
                 box.width, box.height * 0.9])

# Put a legend below current axis
#ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05),
#          fancybox=True, shadow=True, ncol=5)
ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05))

fig.tight_layout()
#SAVE FIG TO PNG
#fig.savefig('FAfig1.png', dpi=fig.dpi)

"""
ax = axs[1, 1]
ax.plot(x, y2)
ax.set_yscale('symlog', linthreshy=0.02)
ax.set_title('symlog')
ax.grid(True)
"""

#**********LITECOIN PRICE/SENT GRAPH******
# log
ax = axs[1, 1]
#fig, ax1 = plt.subplots()
#t = np.arange(0.01, 10.0, 0.01)
#s1 = np.exp(t)
ax.plot(x, a2, 'black',label='Litecoin Price')
ax.set_xlabel('Past Hour')
# Make the y-axis label, ticks and tick labels match the line color.
ax.set_ylabel('Litecoin Price', color='black')
ax.tick_params('y', colors='black')

ax2 = ax.twinx()
#s2 = np.sin(2 * np.pi * t)
ax2.plot(x, y2, 'orange',label='Litecoin Sentiment')
ax2.set_ylabel('Litecoin Sentiment', color='orange')
ax2.tick_params('y', colors='orange')
ax2.margins(0.5)
#ax2.tick_params((-1.0, 1.0), colors='r')
#DOES NOT WORK
#ax2.ylim(-1.0, 1.0))

#ax.legend()


fig.tight_layout()
#SAVE FIG TO PNG
#fig.savefig('FAfig2.png', dpi=fig.dpi)

#plt.show()



"""
ax = axs[0, 1]
ax.plot(x, y1)
ax.set_yscale('log')
ax.set_title('log')
ax.grid(True)
"""

#*******ETHEREUM PRICE/SENT GRAPH*******


# logit
ax = axs[1, 0]


ax.plot(x, a3, 'black',label='Ethereum Price')
ax.set_xlabel('Past Hour')
# Make the y-axis label, ticks and tick labels match the line color.
ax.set_ylabel('Ethereum Price', color='black')
ax.tick_params('y', colors='black')


ax2 = ax.twinx()

#s2 = np.sin(2 * np.pi * t)
ax2.plot(x, y3, 'b-',label='Ethereum Sentiment')

ax2.set_ylabel('Ethereum Sentiment', color='b')
#ax2.margins(0.25)
ax2.tick_params('y', colors='b')


#ax2.tick_params((-1.0, 1.0), colors='r')

plt.ylim(-.2, .5)

#ax.legend()
fig.tight_layout()
fig.autofmt_xdate()



#SAVE FIG TO PNG
fig.savefig('4g1.png', dpi=fig.dpi)

plt.show()
